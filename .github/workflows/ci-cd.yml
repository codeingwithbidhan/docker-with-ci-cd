name: Docker laravel-react with CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Step 4: Build and Push Backend Image
      - name: Build & Push Laravel Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-backend:latest

      # Step 5: Build and Push React Frontend
      - name: Build & Push React Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/react-frontend:latest


      # Step 6: File Copy (docker-compose.production.yml সার্ভারে কপি করা)
      - name: Copy Docker Compose File to Server
        uses: appleboy/scp-action@v0.1.7 # <--- ফাইল কপির জন্য সঠিক অ্যাকশন
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          source: "docker-compose.production.yml" 
          target: "/home/${{ secrets.SERVER_USER }}/docker-with-ci-cd"

      # Step 7: Deploy to Server (optional)
      - name: Deploy using SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          command_timeout: 15m # টাইমআউট 15 মিনিট করা হলো
          
          script: |
            # ১. প্রজেক্ট ডিরেক্টরিতে যাওয়া
            mkdir -p /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd

            # ২. সমস্ত এনভায়রনমেন্ট ভ্যারিয়েবল এক লাইনে অ্যাসাইন করে docker-compose চালানো
            # এটিই ভ্যারিয়েবল পাস করার সবচেয়ে নির্ভরযোগ্য পদ্ধতি
            
            sudo DB_DATABASE=${{ secrets.DB_DATABASE }} \
            DB_USERNAME=${{ secrets.DB_USERNAME }} \
            DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} \
            docker-compose -f docker-compose.production.yml pull

            sudo DB_DATABASE=${{ secrets.DB_DATABASE }} \
            DB_USERNAME=${{ secrets.DB_USERNAME }} \
            DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} \
            docker-compose -f docker-compose.production.yml up -d --force-recreate --remove-orphans
            
            # ৩. ডেটাবেস মাইগ্রেশন
            # এখানে ভ্যারিয়েবলগুলো সরাসরি docker exec এর মাধ্যমে কন্টেইনারের ভিতরে ইনজেক্ট করা হবে
            LARAVEL_CONTAINER_NAME=$(sudo docker-compose -f docker-compose.production.yml ps -q backend) 
            if [ -n "$LARAVEL_CONTAINER_NAME" ]; then
              echo "Running Laravel Migrations..."
              sudo docker exec \
                -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
                -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
                -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                $LARAVEL_CONTAINER_NAME php artisan migrate --force
              sudo docker exec $LARAVEL_CONTAINER_NAME php artisan cache:clear
            else
              echo "Error: Backend container not found for migration."
            fi
            
            echo "Deployment successful!"      