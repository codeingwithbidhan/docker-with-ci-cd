name: Docker laravel-react with CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Step 4: Build and Push Backend Image
      - name: Build & Push Laravel Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-backend:latest

      # Step 5: Build and Push React Frontend
      - name: Build & Push React Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/react-frontend:latest


      # Step 6: File Copy (docker-compose.production.yml ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ)
      - name: Copy Docker Compose File to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          source: "docker-compose.production.yml" 
          target: "/home/${{ secrets.SERVER_USER }}/docker-with-ci-cd"

      # üí° ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ Step 7: ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ì ‡¶á‡¶Æ‡ßá‡¶ú ‡¶™‡ßÅ‡¶≤ ‡¶ï‡¶∞‡¶æ
      - name: Pull Latest Docker Images & Create ENV
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡ßÅ‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã (‡ß®‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü)
          command_timeout: 20m 

          script: |
            # ‡ßß. ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø‡¶§‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ
            TARGET_DIR=/home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            mkdir -p $TARGET_DIR
            cd $TARGET_DIR
            
            # üö® ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç: ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ, ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ
            if [ ! -f "docker-compose.production.yml" ]; then
                echo "Error: docker-compose.production.yml file NOT FOUND in $TARGET_DIR";
                ls -la 
                exit 1;
            fi
            
            # ‡ß®. Secrets ‡¶•‡ßá‡¶ï‡ßá .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
            echo "Creating .env file from secrets..."
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" > .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
            
            # ‡ß©. ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™ ‡¶ì ‡¶™‡ßÅ‡¶≤ (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
            sudo docker-compose -f docker-compose.production.yml down || true
            sudo docker image prune -f || true
            
            echo "Starting Image Pull..."
            sudo docker-compose -f docker-compose.production.yml pull
            echo "Image Pull Complete."

      # üí° ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ Step 7.5: ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶è‡¶∞‡¶∞ ‡¶≤‡¶ó ‡¶ï‡¶∞‡¶æ
      - name: Start Docker Containers and Log Errors
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          # ‡ßß‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ‡¶∞‡¶æ‡¶ñ‡¶≤‡¶æ‡¶Æ, ‡¶Ø‡¶¶‡¶ø‡¶ì ‡¶è‡¶á‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶∂‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ
          command_timeout: 15m 

          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            echo "Attempting to start containers with up -d..."
            
            # Run the command and capture its exit status
            # stderr (2) ‡¶ì stdout (1) ‡¶ï‡ßá ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá logging.txt ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã
            sudo docker-compose -f docker-compose.production.yml up -d --force-recreate --remove-orphans > output_log.txt 2>&1
            STATUS=$?
            
            if [ $STATUS -ne 0 ]; then
                echo "Error: docker-compose up -d failed with status $STATUS."
                
                # üö® ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ß‡¶æ‡¶™: ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶è‡¶∞‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
                echo "--- Printing Error Log from docker-compose up -d ---"
                cat output_log.txt
                
                exit 1
            fi

            echo "Containers launched successfully."
            # ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ, ‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶¶‡¶ø up -d ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º)
            echo "--- Checking Container Status Immediately ---"
            sudo docker-compose -f docker-compose.production.yml ps
            
            echo "Container startup command finished."

      # Step 8: Run Database Migrations (‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç)
      - name: Run Database Migrations and Debug Logs
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          command_timeout: 5m
          
          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            echo "Waiting 30 seconds for containers to become fully ready..."
            sleep 30 
            
            # LARAVEL ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
            LARAVEL_CONTAINER_NAME=$(sudo docker-compose -f docker-compose.production.yml ps -q backend) 
            
            if [ -n "$LARAVEL_CONTAINER_NAME" ]; then
              # ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶≤‡ßá, ‡¶§‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
              CONTAINER_STATUS=$(sudo docker inspect -f '{{.State.Status}}' $LARAVEL_CONTAINER_NAME)

              if [ "$CONTAINER_STATUS" = "running" ]; then
                  echo "Backend container is RUNNING. Running Migrations...";
                  sudo docker exec $LARAVEL_CONTAINER_NAME php artisan migrate --force;
                  sudo docker exec $LARAVEL_CONTAINER_NAME php artisan cache:clear;
                  echo "Deployment successful!";
              else
                  echo "Error: Backend container found but status is NOT RUNNING ($CONTAINER_STATUS).";
                  
                  # üö® ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç: ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶§‡¶æ‡¶∞ ‡¶≤‡¶ó ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
                  echo "--- Printing Backend Container Logs ---"
                  sudo docker-compose -f docker-compose.production.yml logs backend
                  
                  # üö® ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç: ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ü ‡¶ï‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
                  echo "--- Container Status Check ---"
                  sudo docker-compose -f docker-compose.production.yml ps
                  
                  exit 1;
              fi
            else
              echo "Error: Backend container not found. Checking logs...";
              sudo docker-compose -f docker-compose.production.yml logs 
              sudo docker-compose -f docker-compose.production.yml ps
              exit 1;
            fi