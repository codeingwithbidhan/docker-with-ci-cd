name: Docker laravel-react with CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Step 4: Build and Push Backend Image
      - name: Build & Push Laravel Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-backend:latest

      # Step 5: Build and Push React Frontend
      - name: Build & Push React Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/react-frontend:latest


      # Step 6: File Copy (docker-compose.production.yml ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ)
      - name: Copy Docker Compose File to Server
        uses: appleboy/scp-action@v0.1.7 # <--- ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ï‡¶™‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          source: "docker-compose.production.yml" 
          target: "/home/${{ secrets.SERVER_USER }}/docker-with-ci-cd"

      # üí° ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ Step 7: ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶á‡¶Æ‡ßá‡¶ú ‡¶™‡ßÅ‡¶≤ ‡¶ï‡¶∞‡¶æ (‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡¶æ‡¶™‡ßá‡¶ï‡ßç‡¶∑ ‡¶ß‡¶æ‡¶™)
      - name: Pull Latest Docker Images & Create ENV
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡ßÅ‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã (‡ß®‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü)
          command_timeout: 20m 

          script: |
            # ‡ßß. ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø‡¶§‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
            mkdir -p /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            # ‡ß®. Secrets ‡¶•‡ßá‡¶ï‡ßá .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ (‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏)
            echo "Creating .env file from secrets..."
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" > .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
            
            # ‡ß©. ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
            sudo docker-compose -f docker-compose.production.yml down || true
            sudo docker image prune -f || true
            
            # ‡ß™. ‡¶á‡¶Æ‡ßá‡¶ú ‡¶™‡ßÅ‡¶≤ ‡¶ï‡¶∞‡¶æ (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡ßÅ‡¶≤!)
            echo "Starting Image Pull..."
            sudo docker-compose -f docker-compose.production.yml pull
            echo "Image Pull Complete."

      # üí° ‡¶®‡¶§‡ßÅ‡¶® Step 7.5: ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ß‡¶æ‡¶™)
      - name: Start Docker Containers
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶Æ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü (‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü)
          command_timeout: 5m

          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            # ‡ß´. ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶æ (‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßÅ‡¶≤‡¶ø‡¶Ç ‡¶®‡ßá‡¶á)
            sudo docker-compose -f docker-compose.production.yml up -d --force-recreate --remove-orphans
            echo "Container startup command finished."

      # Step 8: Run Database Migrations (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
      - name: Run Database Migrations
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          command_timeout: 5m
          
          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            # LARAVEL ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
            LARAVEL_CONTAINER_NAME=$(sudo docker-compose -f docker-compose.production.yml ps -q backend) 
            
            if [ -n "$LARAVEL_CONTAINER_NAME" ]; then
              echo "Running Laravel Migrations...";
              # DB Secrets ‡¶è‡¶ñ‡¶® .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶¨‡ßá
              sudo docker exec $LARAVEL_CONTAINER_NAME php artisan migrate --force;
              sudo docker exec $LARAVEL_CONTAINER_NAME php artisan cache:clear;
              echo "Deployment successful!";
            else
              echo "Error: Backend container not found for migration.";
              exit 1;
            fi