name: Docker laravel-react with CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1-6: (Unchanged)
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build & Push Laravel Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-backend:latest

      - name: Build & Push React Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/react-frontend:latest


      - name: Copy Docker Compose File to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          source: "docker-compose.production.yml" 
          target: "/home/${{ secrets.SERVER_USER }}/docker-with-ci-cd"

      # üí° Step 7: ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ì ‡¶á‡¶Æ‡ßá‡¶ú ‡¶™‡ßÅ‡¶≤ ‡¶ï‡¶∞‡¶æ (Pull now needs sudo)
      - name: Pull Latest Docker Images & Create ENV
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          command_timeout: 20m 

          script: |
            TARGET_DIR=/home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            mkdir -p $TARGET_DIR
            cd $TARGET_DIR
            
            if [ ! -f "docker-compose.production.yml" ]; then
                echo "Error: docker-compose.production.yml file NOT FOUND in $TARGET_DIR";
                ls -la 
                exit 1;
            fi
            
            echo "Creating .env file from secrets..."
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" > .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
            
            # Use sudo for docker-compose down/prune/pull
            sudo docker-compose -f docker-compose.production.yml down || true
            sudo docker image prune -f || true
            
            echo "Starting Image Pull..."
            sudo docker-compose -f docker-compose.production.yml pull
            echo "Image Pull Complete."

      # üîç ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶ó‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ï ‡¶ß‡¶æ‡¶™: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ (Unchanged)
      - name: Verify Docker Compose Content on Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          
          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            echo "--- VERIFYING CURRENT docker-compose.production.yml CONTENT ---"
            cat docker-compose.production.yml
            echo "---------------------------------------------------------------"

      # üí° ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶ó‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ï: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ì ‡¶™‡¶æ‡¶• ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á (Path & Syntax now needs sudo for config)
      - name: Deployment Health Check (Path & Syntax)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}

          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            echo "--- Checking Docker Compose Path and Installation ---"
            
            # Check if the explicit path exists
            if [ -f /usr/local/bin/docker-compose ]; then
                echo "SUCCESS: Explicit path /usr/local/bin/docker-compose exists."
            else
                echo "FATAL ERROR: /usr/local/bin/docker-compose not found. Docker Compose might be missing or installed elsewhere."
                exit 1
            fi
            
            echo "--- Validating Docker Compose Syntax (using explicit path) ---"
            # Validate YAML syntax and configuration, force exit on failure (Use sudo here too)
            sudo /usr/local/bin/docker-compose -f docker-compose.production.yml config || {
                echo "FATAL ERROR: docker-compose config failed. Check YAML output for errors."
                exit 1
            }
            echo "Syntax check passed successfully. Ready to launch containers."


      # üöÄ FINAL DEPLOYMENT STEP: Combine Start, Wait, and Migrate (Blocking with Long Timeout)
      # nohup-‡¶è‡¶∞ ‡¶ú‡¶ü‡¶ø‡¶≤‡¶§‡¶æ ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶ï, ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø, ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§
      - name: Start Containers, Wait, and Migrate
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          # üö® ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü (10 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü) ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã, ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶≤‡¶ï‡¶ø‡¶Ç ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡•§
          command_timeout: 10m 

          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            echo "--- Starting Containers (Blocking) ---"
            # ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            # üö® TTY/SUDO FIX: < /dev/null ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã ‡¶Ø‡¶æ‡¶§‡ßá sudo ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá
            sudo /usr/local/bin/docker-compose -f docker-compose.production.yml up -d --force-recreate --remove-orphans < /dev/null || {
                echo "FATAL ERROR: docker-compose up failed immediately."
                sudo /usr/local/bin/docker-compose -f docker-compose.production.yml logs
                exit 1
            }
            
            echo "Containers started. Waiting for backend health check..."
            
            MAX_WAIT=120
            COUNTER=0
            LARAVEL_CONTAINER_NAME=""

            # üö® ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï ‡¶≤‡ßÅ‡¶™: ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ 120 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá
            while [ $COUNTER -lt $MAX_WAIT ]; do
                LARAVEL_CONTAINER_NAME=$(sudo /usr/local/bin/docker-compose -f docker-compose.production.yml ps -q backend) 
                
                if [ -n "$LARAVEL_CONTAINER_NAME" ]; then
                    CONTAINER_STATUS=$(sudo /usr/bin/docker inspect -f '{{.State.Status}}' $LARAVEL_CONTAINER_NAME)
                    
                    if [ "$CONTAINER_STATUS" = "running" ]; then
                        echo "Backend container is RUNNING after $COUNTER seconds."
                        break
                    fi
                fi
                
                echo "Waiting for backend container to run ($((MAX_WAIT - COUNTER))s remaining)..."
                sleep 5
                COUNTER=$((COUNTER + 5))
            done

            # ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï
            if [ "$CONTAINER_STATUS" = "running" ]; then
                echo "Waiting 10 seconds for DB connection establishment before migrations...";
                sleep 10
                  
                # ‡¶Æ‡¶æ‡¶á‡¶ó‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ì ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
                echo "Running Migrations..."
                sudo /usr/bin/docker exec $LARAVEL_CONTAINER_NAME php artisan migrate --force;
                sudo /usr/bin/docker exec $LARAVEL_CONTAINER_NAME php artisan cache:clear;
                echo "Deployment successful!";
            else
                echo "Error: Backend container failed to run within $MAX_WAIT seconds."
                echo "--- Printing Full Docker Compose Logs for Diagnosis ---"
                sudo /usr/local/bin/docker-compose -f docker-compose.production.yml logs 
                exit 1;
            fi
