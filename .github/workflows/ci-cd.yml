name: Docker laravel-react with CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1-6: (Unchanged)
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build & Push Laravel Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-backend:latest

      - name: Build & Push React Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/react-frontend:latest


      - name: Copy Docker Compose File to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          source: "docker-compose.production.yml" 
          target: "/home/${{ secrets.SERVER_USER }}/docker-with-ci-cd"

      # üí° Step 7: ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ì ‡¶á‡¶Æ‡ßá‡¶ú ‡¶™‡ßÅ‡¶≤ ‡¶ï‡¶∞‡¶æ (Pull now needs sudo)
      - name: Pull Latest Docker Images & Create ENV
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          command_timeout: 20m 

          script: |
            TARGET_DIR=/home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            mkdir -p $TARGET_DIR
            cd $TARGET_DIR
            
            if [ ! -f "docker-compose.production.yml" ]; then
                echo "Error: docker-compose.production.yml file NOT FOUND in $TARGET_DIR";
                ls -la 
                exit 1;
            fi
            
            echo "Creating .env file from secrets..."
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" > .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
            
            # Use sudo for docker-compose down/prune/pull
            sudo docker-compose -f docker-compose.production.yml down || true
            sudo docker image prune -f || true
            
            echo "Starting Image Pull..."
            sudo docker-compose -f docker-compose.production.yml pull
            echo "Image Pull Complete."

      # üîç ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶ó‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ï ‡¶ß‡¶æ‡¶™: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ (Unchanged)
      - name: Verify Docker Compose Content on Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          
          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            echo "--- VERIFYING CURRENT docker-compose.production.yml CONTENT ---"
            cat docker-compose.production.yml
            echo "---------------------------------------------------------------"

      # üí° ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶ó‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ï: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ì ‡¶™‡¶æ‡¶• ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á (Path & Syntax now needs sudo for config)
      - name: Deployment Health Check (Path & Syntax)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}

          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            echo "--- Checking Docker Compose Path and Installation ---"
            
            # Check if the explicit path exists
            if [ -f /usr/local/bin/docker-compose ]; then
                echo "SUCCESS: Explicit path /usr/local/bin/docker-compose exists."
            else
                echo "FATAL ERROR: /usr/local/bin/docker-compose not found. Docker Compose might be missing or installed elsewhere."
                exit 1
            fi
            
            echo "--- Validating Docker Compose Syntax (using explicit path) ---"
            # Validate YAML syntax and configuration, force exit on failure (Use sudo here too)
            sudo /usr/local/bin/docker-compose -f docker-compose.production.yml config || {
                echo "FATAL ERROR: docker-compose config failed. Check YAML output for errors."
                exit 1
            }
            echo "Syntax check passed successfully. Ready to launch containers."


      # üí° ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ Step 7.5: ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü (Non-Blocking) - **SIMPLIFIED NOHUP & LOGGING**
      - name: Start Docker Containers (Non-Blocking)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          # üö® ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü 1 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá
          command_timeout: 1m 

          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            # üö® CRITICAL LOGGING FIX: Writing a start marker to the log file first
            echo "--- STARTUP ATTEMPTING (NON-BLOCKING) ---" > docker_startup.log
            echo "Working Directory: $(pwd)" >> docker_startup.log 2>&1
            
            echo "Starting containers using nohup for non-blocking execution with explicit path and sudo..." >> docker_startup.log 2>&1
            
            # üö® FINAL FIX: Simplified nohup command. The full command executes directly using nohup to background sudo.
            # This avoids the extra layer of 'bash -c' which might be causing context loss.
            nohup sudo /usr/local/bin/docker-compose -f docker-compose.production.yml up -d --force-recreate --remove-orphans >> docker_startup.log 2>&1 &
            
            echo "Non-blocking startup initiated. The next step will wait for containers."

      # Step 8: ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ, ‡¶Æ‡¶æ‡¶á‡¶ó‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç Debug Logs (5m Timeout) - **ADDED SUDO**
      - name: Wait 90s, Run Migrations and Debug Logs
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          command_timeout: 5m
          
          script: |
            cd /home/${{ secrets.SERVER_USER }}/docker-with-ci-cd
            
            # üö® ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ: ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø 90 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§
            echo "Waiting 90 seconds for all containers to fully start and stabilize..."
            sleep 90
            
            # LARAVEL ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ (Use sudo)
            LARAVEL_CONTAINER_NAME=$(sudo /usr/local/bin/docker-compose -f docker-compose.production.yml ps -q backend) 
            
            if [ -n "$LARAVEL_CONTAINER_NAME" ]; then
              # inspect now needs sudo
              CONTAINER_STATUS=$(sudo /usr/bin/docker inspect -f '{{.State.Status}}' $LARAVEL_CONTAINER_NAME)

              if [ "$CONTAINER_STATUS" = "running" ]; then
                  echo "Backend container is RUNNING. Running Migrations...";
                  echo "Waiting 10 seconds for DB connection establishment...";
                  sleep 10
                  
                  # üö® FIX: docker exec needs sudo
                  sudo /usr/bin/docker exec $LARAVEL_CONTAINER_NAME php artisan migrate --force;
                  sudo /usr/bin/docker exec $LARAVEL_CONTAINER_NAME php artisan cache:clear;
                  echo "Deployment successful!";
              else
                  echo "Error: Backend container found but status is NOT RUNNING ($CONTAINER_STATUS).";
                  
                  # üö® ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç: ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶§‡¶æ‡¶∞ ‡¶≤‡¶ó ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ (Use sudo)
                  echo "--- Printing Backend Container Logs ---"
                  sudo /usr/local/bin/docker-compose -f docker-compose.production.yml logs backend
                  
                  # üö® ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç: ‡¶®‡¶®-‡¶¨‡ßç‡¶≤‡¶ï‡¶ø‡¶Ç ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
                  echo "--- Printing Non-Blocking Startup Log (docker_startup.log) ---"
                  cat docker_startup.log || echo "Startup log file not found."
                  
                  exit 1;
              fi
            else
              echo "Error: Backend container not found. Containers failed to start.";
              
              # üö® ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó: ‡¶®‡¶®-‡¶¨‡ßç‡¶≤‡¶ï‡¶ø‡¶Ç ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
              echo "--- Printing Non-Blocking Startup Log (docker_startup.log) ---"
              cat docker_startup.log || echo "Startup log file not found."
              
              # Final logs need sudo
              sudo /usr/local/bin/docker-compose -f docker-compose.production.yml logs 
              exit 1;
            fi
